- name: all
  alias: [full]
  syntax: compiled
  description: Aggregated GoLang syntax sections

- name: array
  alias: [arr,a,arrays]
  syntax: |
    arr := [3]int{1, 2, 3} // define array
    fmt.Println(arr[0])    // access element
  description: Go arrays basics

- name: map
  alias: [mp,m,maps,hashmap]
  syntax: |
    m := map[string]int{"a": 1, "b": 2}
    fmt.Println(m["a"]) // access map
  description: Go maps basics

- name: slice
  alias: [slc,s,slices]
  syntax: |
    s := []int{1, 2, 3} // slice declaration
    s = append(s, 4)    // append element
  description: Go slices basics

- name: function
  alias: [fn,func,f,functions]
  syntax: |
    func add(a int, b int) int {
        return a + b
    }
    func sub(a int, b int)(int,float){}
  description: Go functions

- name: struct
  alias: [structs]
  syntax: |
    type Person struct {
        Name string
        Age  int
    }  // Declaring Struct
    func (p Person) Greet() string {
        return "Hello, " + p.Name
    }
    p := Person{"Thinesh", 30} // initilize struct 
    fmt.Println(p.Greet())
  description: Struct declaration with method

- name: pointer
  alias: [p,ptr,pointers]
  syntax: |
    var a int = 42
    var p *int = &a    // pointer to a
    fmt.Println(*p)    // dereference pointer
  description: Pointers basics

- name: interface
  alias: [i,iface,intf,interfaces]
  syntax: |
    type Greeter interface {
        Greet() string
    }
    func sayHello(g Greeter) {
        fmt.Println(g.Greet())
    }
  description: Interface basics

- name: goroutine
  alias: [go,gr,groutine,rountine]
  syntax: |
    go func() {
        fmt.Println("Running")
    }()
  description: Launch goroutine (concurrent func)

- name: condition
  alias: [cond,ifelse]
  syntax: |
    if x > 10 {fmt.Println("Big number")
    } else {  fmt.Println("Small number")}
  description: If-else condition

- name: for loop
  alias: [loop, range, for]
  syntax: |
    for i := 0; i < n; i++ { /* logic */ }         // standard loop
    for i := range data { /* logic */ }            // range-based
    for condition { /* logic */ }                  // conditional loop

- name: make_command
  alias: [make, makes]
  syntax: |
    s := make([]int, 0, 5)         // make slice
    m := make(map[string]int)      // make map
    c := make(chan int)            // make channel
  description: make usage for slices, maps, channels

- name: go_build
  alias: [build,builds]
  syntax: |
    go mod init && go mod tidy // initilize and pull dependecies
    GOOS=linux GOARCH=amd64 go build -o app-linux
    GOOS=windows GOARCH=amd64 go build -o app.exe
  description: Cross-compiling Go binaries

- name: string
  alias: [str,s]
  syntax: |
    str := "hello"
    str := `Multiline string`
    b := []byte(str)             // string to bytes
    r := []rune(str)             // string to runes
    str2 := string(b)            // bytes to string
    str3 := string(r)            // runes to string
  description: String, byte, rune conversions
  
- name: fmt
  alias: [print,format,strformat,stdout]
  syntax: |
    fmt.Print("hello")                      // basic print
    fmt.Println("hello", "world")          // print with newline
    fmt.Printf("Hello %s\n", "Thinesh")    // formatted print

    // Types
    fmt.Printf("int: %d\n", 42)
    fmt.Printf("float: %.2f\n", 3.14159)    // 2 decimal places
    fmt.Printf("hex: %x\n", 255)            // hex output
    fmt.Printf("char: %c\n", 65)            // ASCII to char
    fmt.Printf("string: %s\n", "go")
    fmt.Printf("rune: %q\n", 'ðŸ§ ')          // rune quote
    fmt.Printf("byte: %v\n", []byte("go"))  // byte slice

    // Debugging
    fmt.Printf("struct: %+v\n", p)          // print field names
    fmt.Printf("type: %T\n", p)             // print type

    // String formatting
    s := fmt.Sprintf("Pi is %.3f", 3.14159) // formatted string return

    // Align + pad
    fmt.Printf("%6s\n", "Go")     // pad left
    fmt.Printf("%-6s\n", "Go")    // pad right

    // Number cut decimal
    fmt.Printf("%.0f\n", 9.99)    // print 10, round float
  description: Printing, formatting bytes, runes, strings, decimals using fmt package

- name: runes
  alias: [rn, rune]
  syntax: |
    r := []rune("ä¸–ç•Œ")
    fmt.Println(len(r))          // count runes, not bytes
  description: Rune basics (Unicode code points)

- name: byte
  alias: [bt, bytes]
  syntax: |
    b := []byte{0x48, 0x65, 0x6c, 0x6c, 0x6f}
    fmt.Println(string(b))       // convert bytes to string
  description: Byte slice basics

- name: files
  alias: [file,io]
  syntax: |
    // --- Read file ---
    f, err := os.Open("file.txt")                    // open file in read-only mode
    if err != nil { log.Fatal(err) }
    defer f.Close()
    buf := make([]byte, 100)                         // create 100-byte buffer
    n, _ := f.Read(buf)                              // read up to 100 bytes
    fmt.Println(string(buf[:n]))                     // print the read data

    // --- Write file (overwrite if exists) ---
    data := []byte("hello")                          
    os.WriteFile("new.txt", data, 0644)              // write data with rw-r--r-- perms

    // --- Append to file ---
    af, err := os.OpenFile("new.txt", os.O_APPEND|os.O_WRONLY, 0644) // open in append mode
    defer af.Close()
    af.WriteString("\nworld")                        // append string to end of file
  description: File open, read, close basics

- name: network
  alias: [net,socket]
  syntax: |
    ln, _ := net.Listen("tcp", ":8080")         // listen on port 8080
    conn, _ := ln.Accept()                      // accept incoming connection
    defer conn.Close()
    buf := make([]byte, 512)                    // buffer to read client data
    n, _ := conn.Read(buf)                      // read from connection
    fmt.Println(string(buf[:n]))                // print received data
    conn.Write([]byte("pong"))                  // send response to client
  description: Basic TCP server accept and respond
  
- name: go_command
  alias: [gocmd, cmd, gocommands, gocommand]
  syntax: |
    go help                 // general help
    go help <command>      // help for specific command (e.g., go help build)
    go doc fmt             // show docs for std lib 'fmt'
    go doc fmt.Println     // show doc for specific function
    go list std            // list all standard packages
    go env                 // show Go environment setup
    go version             // current Go version
    go mod tidy            // clean up go.mod/go.sum
  description: Go CLI commands for docs, std lib, version, and env info

- name: go_lib
  alias: [std,gostd,golib]
  syntax: |
    "fmt"        // print to stdout/stderr
    "os"         // file ops, env vars, args
    "io/ioutil"  // quick file read/write (deprecated, use os + io)
    "bufio"      // buffered I/O for performance
    "net/http"   // HTTP client & server
    "net"        // TCP, UDP sockets
    "time"       // timers, sleeping, formatting time
    "strings"    // string ops (split, join, trim, etc.)
    "strconv"    // convert string <-> int, float, bool
    "encoding/json" // marshal/unmarshal JSON
    "context"    // cancelable request flows
    "sync"       // mutex, waitgroup
    "errors"     // wrap and create errors
    "log"        // simple structured logging
    "flag"       // CLI arg parser
  description: Most-used Go standard libraries for system, net, I/O, and backend work
